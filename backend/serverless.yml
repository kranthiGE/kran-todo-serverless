service:
  name: kran-todo-serverless-app
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ap-south-1'}

  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB

  environment:
    TODO_TABLE: Todo-${self:provider.stage}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:UpdateItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  documentation:
    api:
      info:
        version: v1.0.8
        title: kran-todo-serverless-app API
        description: serverless app for TODO
    models:
      - name: TodoRequest
        contentType: application/json
        schema: ${file(models/create-todo-request.json)}

functions:
  
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true

  CreateTodos:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new todo
            description: Create a new todo
            requestModels:
              'application/json': TodoRequest
  
  UpdateTodos:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: put
          path: todos/{todoId}
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update a todo item
            description: Update a todo item
            requestModels:
              'application/json': TodoRequest

resources:
  Resources:
    TodosDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: todoId
            AttributeType: S
        KeySchema:
          - AttributeName: todoId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODO_TABLE}

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false